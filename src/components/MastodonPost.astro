---
import type { MastodonPost } from "../types/mastodon";
import LinkPreview from "./LinkPreview.astro";
import VideoIcon from "./icons/VideoIcon.astro";
import AudioIcon from "./icons/AudioIcon.astro";
import AttachmentIcon from "./icons/AttachmentIcon.astro";
import { config } from "../config";

interface Props {
  post: MastodonPost;
}

const { post } = Astro.props;

function formatDate(dateString: string) {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

function stripHtml(html: string) {
  return html.replace(/<[^>]*>/g, "");
}

function extractUrls(content: string): string[] {
  const urlRegex = /https?:\/\/[^\s<>"]+/gi;
  const matches = content.match(urlRegex) || [];

  // Remove duplicates and filter out image/media URLs, hashtags, and user profiles
  return [...new Set(matches)].filter((url) => {
    // Skip media files
    if (url.match(/\.(jpg|jpeg|png|gif|webp|mp4|mp3|wav|pdf)$/i)) {
      return false;
    }
    // Skip hashtag URLs (contain /tags/ or /hashtag/)
    if (url.match(/\/(tags|hashtag)\//i)) {
      return false;
    }
    // Skip user profile URLs (contain @ symbol or /users/ or end with username pattern)
    if (url.match(/@|\/users\/|\/u\/|\/profile\//i)) {
      return false;
    }
    // Skip URLs that are just www or www.
    if (url.match(/^https?:\/\/(www\.?)$/i)) {
      return false;
    }
    return true;
  });
}

function cleanMastodonLinks(content: string): string {
  // Replace Mastodon's complex link structure with simple links
  return content.replace(
    /<a([^>]*?)><span[^>]*class="invisible"[^>]*>([^<]*?)<\/span><span[^>]*>([^<]*?)<\/span><span[^>]*class="invisible"[^>]*>([^<]*?)<\/span><\/a>/g,
    (match, attributes, start, middle, end) => {
      const linkIcon =
        '<svg class="inline w-4 h-4 mr-0.5 align-middle" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.1m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/></svg>';

      return `<a${attributes}>${linkIcon}${middle}${end}</a>`;
    },
  );
}

const cleanContent = cleanMastodonLinks(post.content);
const urls = extractUrls(cleanContent);
---

<article class="rounded-xl border shadow-sm p-6 transition-all duration-300">
  <header class="flex justify-between items-start mb-5">
    <div class="flex items-center space-x-4">
      <img
        src={post.account.avatar}
        alt={`${post.account.display_name} avatar`}
        class="w-14 h-14 rounded-full object-cover ring-2"
      />
      <div>
        <div class="font-bold text-lg">
          {post.account.display_name}
        </div>
        <div class="text-sm">@{post.account.username}</div>
      </div>
    </div>
    <a
      href={post.url}
      target="_blank"
      rel="noopener noreferrer"
      class="text-sm whitespace-nowrap ml-4 px-3 py-1 rounded-full transition-colors no-underline"
    >
      <time datetime={post.created_at}>
        {formatDate(post.created_at)}
      </time>
    </a>
  </header>

  {
    post.spoiler_text && (
      <div class="border rounded-lg p-4 mb-5">
        <div>
          <strong class="font-bold">Content Warning:</strong>{" "}
          {post.spoiler_text}
        </div>
      </div>
    )
  }

  <div
    class="prose prose-a:link prose-a:link-hover max-w-none leading-relaxed"
    set:html={cleanContent}
  />

  {
    post.media_attachments && post.media_attachments.length > 0 && (
      <div class="mb-5 space-y-3">
        {post.media_attachments.map((media) =>
          media.type === "image" ? (
            <img
              src={media.url}
              alt={media.description || "Media attachment"}
              class="rounded-xl max-w-full h-auto border shadow-sm"
            />
          ) : (
            <a
              href={media.url}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center space-x-3 px-4 py-2 rounded-lg border"
            >
              {media.type === "video" ? (
                <VideoIcon />
              ) : media.type === "audio" ? (
                <AudioIcon />
              ) : (
                <AttachmentIcon />
              )}
              <span class="font-medium">
                {media.description || `${media.type} attachment`}
              </span>
            </a>
          ),
        )}
      </div>
    )
  }

  {
    config.enableLinkPreviews && urls.length > 0 && (
      <div class="mb-5 space-y-3">
        {urls.map((url) => (
          <LinkPreview url={url} />
        ))}
      </div>
    )
  }
</article>
