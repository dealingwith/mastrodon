---
import MastodonPost from "./MastodonPost.astro";
import type { ThreadGroup } from "../utils/threadProcessor";
import ReplyArrowIcon from "./icons/ReplyArrowIcon.astro";

interface Props {
  thread: ThreadGroup;
}

const { thread } = Astro.props;
const { posts } = thread;

// Only show as thread if there are multiple posts
const isThread = posts.length > 1;
---

<div class={`thread-container ${isThread ? "is-thread" : ""}`}>
  {
    posts.map((post, index) => (
      <div
        class={`thread-post depth-${post.depth} ${post.isReply ? "is-reply" : "is-root"}`}
        data-thread-position={post.threadPosition}
      >
        {/* Reply indicator */}
        {post.isReply && (
          <div class="reply-indicator">
            <ReplyArrowIcon class="w-4 h-4" />
            <span class="text-xs ml-1">Replying to thread</span>
          </div>
        )}

        {/* The actual post */}
        <div class="post-content">
          <MastodonPost post={post} />
        </div>
      </div>
    ))
  }

  {/* Thread summary for long threads */}
  {
    isThread && posts.length > 3 && (
      <div class="thread-summary">
        <div class="text-sm px-3 py-2 rounded-lg border">
          üìù Thread with {posts.length} posts
        </div>
      </div>
    )
  }
</div>

<style>
  .thread-container {
    position: relative;
  }

  .thread-post {
    position: relative;
    margin-bottom: 1rem;
  }

  .thread-post.is-reply {
    margin-left: 2rem;
  }

  .thread-post.depth-1 {
    margin-left: 2rem;
  }
  .thread-post.depth-2 {
    margin-left: 4rem;
  }
  .thread-post.depth-3 {
    margin-left: 6rem;
  }

  .reply-indicator {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    padding-left: 0.5rem;
  }

  .thread-summary {
    margin-top: 1rem;
    text-align: center;
  }

  .post-content {
    position: relative;
    z-index: 1;
  }
</style>
