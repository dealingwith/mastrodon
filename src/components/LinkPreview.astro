---
import ExternalArrowIcon from './icons/ExternalArrowIcon.astro';

interface Props {
  url: string;
}

const { url } = Astro.props;

interface LinkPreviewData {
  title?: string;
  description?: string;
  image?: string;
  siteName?: string;
  favicon?: string;
}

// Decode common HTML entities in titles and descriptions
function decodeHtmlEntities(text: string): string {
  if (!text) return text;
  
  const entityMap: Record<string, string> = {
    '&amp;': '&',
    '&#39;': "'",
    '&quot;': '"',
    '&lt;': '<',
    '&gt;': '>',
    '&nbsp;': ' ',
    '&#x27;': "'",
    '&#x2F;': '/',
    '&#x3D;': '='
  };
  
  return text.replace(/&(?:amp|#39|quot|lt|gt|nbsp|#x27|#x2F|#x3D);/g, (match) => entityMap[match] || match);
}

async function fetchLinkPreview(url: string): Promise<LinkPreviewData | null> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 3000); // Reduced to 3 seconds

  try {
    const response = await fetch(url, {
      headers: {
        "User-Agent": "Mozilla/5.0 (compatible; Mastrodon/1.0; +https://example.com/bot)",
        "Accept": "text/html",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "close", // Don't keep connection alive
      },
      signal: controller.signal,
    });

    clearTimeout(timeout);

    if (!response.ok) return null;

    // Stream the response and stop after we get the head section
    const reader = response.body?.getReader();
    if (!reader) return null;

    const decoder = new TextDecoder();
    let html = '';
    let foundHead = false;
    
    try {
      while (!foundHead) {
        const { done, value } = await reader.read();
        
        if (done) break;
        
        html += decoder.decode(value, { stream: true });
        
        // Stop reading once we have the closing head tag or enough content
        if (html.includes('</head>') || html.length > 50000) {
          foundHead = true;
          reader.cancel(); // Stop the stream
        }
      }
    } finally {
      reader.releaseLock();
    }
    const preview: LinkPreviewData = {};

    // Extract Open Graph and meta tags
    const ogTitleMatch = html.match(
      /<meta property="og:title" content="([^"]*)"[^>]*>/i
    );
    const ogDescMatch = html.match(
      /<meta property="og:description" content="([^"]*)"[^>]*>/i
    );
    const ogImageMatch = html.match(
      /<meta property="og:image" content="([^"]*)"[^>]*>/i
    );
    const ogSiteMatch = html.match(
      /<meta property="og:site_name" content="([^"]*)"[^>]*>/i
    );

    const titleMatch = html.match(/<title[^>]*>([^<]*)<\/title>/i);
    const descMatch = html.match(
      /<meta name="description" content="([^"]*)"[^>]*>/i
    );
    const faviconMatch = html.match(
      /<link[^>]*rel="(?:shortcut )?icon"[^>]*href="([^"]*)"[^>]*>/i
    );

    preview.title = decodeHtmlEntities(ogTitleMatch?.[1] || titleMatch?.[1] || "");
    preview.description = decodeHtmlEntities(ogDescMatch?.[1] || descMatch?.[1] || "");
    preview.image = ogImageMatch?.[1] || "";
    preview.siteName = decodeHtmlEntities(ogSiteMatch?.[1] || new URL(url).hostname);
    preview.favicon = faviconMatch?.[1] || "";

    // Make relative URLs absolute
    if (preview.image && !preview.image.startsWith("http")) {
      const baseUrl = new URL(url);
      preview.image = new URL(preview.image, baseUrl.origin).href;
    }

    if (preview.favicon && !preview.favicon.startsWith("http")) {
      const baseUrl = new URL(url);
      preview.favicon = new URL(preview.favicon, baseUrl.origin).href;
    }

    return preview;
  } catch (error) {
    if (error instanceof Error && error.name === "AbortError") {
      console.error("Fetch timed out for: ", url);
    } else {
      console.error("Error fetching link preview for: ", url, error);
    }
    return null;
  }
}

const preview = await fetchLinkPreview(url);
const domain = new URL(url).hostname;
---

{
  preview && (preview.title || preview.description) && (
    <div class="border border-orange-200 rounded-lg overflow-hidden bg-white hover:shadow-md transition-shadow">
      <a
        href={url}
        target="_blank"
        rel="noopener noreferrer"
        class="block no-underline"
      >
        {preview.image && (
          <div class="aspect-video w-full overflow-hidden bg-gray-100">
            <img
              src={preview.image}
              alt={preview.title || "Link preview"}
              class="w-full h-full object-cover"
              loading="lazy"
            />
          </div>
        )}

        <div class="p-4">
          <div class="flex items-center space-x-2 mb-2">
            {preview.favicon && (
              <img
                src={preview.favicon}
                alt=""
                class="w-4 h-4"
                loading="lazy"
              />
            )}
            <span class="text-sm text-stone-500 truncate">
              {preview.siteName || domain}
            </span>
            <ExternalArrowIcon class="w-3 h-3 text-stone-400" />
          </div>

          {preview.title && (
            <h3 class="font-semibold text-stone-900 mb-2 line-clamp-2 leading-tight">
              {preview.title}
            </h3>
          )}

          {preview.description && (
            <p class="text-stone-600 text-sm line-clamp-3 leading-relaxed">
              {preview.description}
            </p>
          )}
        </div>
      </a>
    </div>
  )
}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
