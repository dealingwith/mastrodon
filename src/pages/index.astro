---
import MastodonPost from '../components/MastodonPost.astro';
import type { MastodonPost as MastodonPostType } from '../types/mastodon';

// Load Mastodon archive from JSON file
let posts: MastodonPostType[] = [];

try {
  // Import the JSON file directly
  const archiveData = await import('../../public/mastodon-archive.json');
  const data = archiveData.default;
  
  // Handle ActivityPub format
  if (data.orderedItems) {
    posts = data.orderedItems
      .filter((item: any) => item.type === 'Create' && item.object && item.object.type === 'Note')
      .map((item: any) => {
        const obj = item.object;
        return {
          id: obj.id || Math.random().toString(),
          created_at: obj.published || new Date().toISOString(),
          content: obj.content || '',
          url: obj.url || obj.id,
          visibility: 'public',
          sensitive: obj.sensitive || false,
          spoiler_text: obj.summary || '',
          media_attachments: obj.attachment?.map((att: any) => ({
            id: att.id || Math.random().toString(),
            type: att.mediaType?.includes('image') ? 'image' : 
                  att.mediaType?.includes('video') ? 'video' : 
                  att.mediaType?.includes('audio') ? 'audio' : 'unknown',
            url: att.url || att.href,
            preview_url: att.url || att.href,
            description: att.name || att.summary
          })) || [],
          account: {
            id: obj.attributedTo || 'unknown',
            username: obj.attributedTo?.split('/').pop() || 'user',
            display_name: obj.attributedTo?.split('/').pop() || 'User',
            avatar: '/favicon.svg',
            url: obj.attributedTo || ''
          },
          replies_count: obj.replies?.totalItems || 0,
          reblogs_count: obj.shares?.totalItems || 0,
          favourites_count: obj.likes?.totalItems || 0
        };
      });
  }
  
  // Sort by date (newest first)
  posts.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
} catch (error) {
  console.log('Could not load mastodon-archive.json:', error);
}
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Mastodon Archive</title>
		<style>
			@import "tailwindcss";
		</style>
	</head>
	<body class="bg-orange-50 text-stone-900 font-sans">
		<header class="relative bg-gradient-to-br from-orange-600 via-amber-600 to-red-700 text-white overflow-hidden">
			<!-- Textured pattern overlay -->
			<div class="absolute inset-0 opacity-20">
				<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg" class="absolute inset-0 w-full h-full">
					<g fill="none" fill-rule="evenodd">
						<g fill="currentColor" fill-opacity="0.3">
							<circle cx="30" cy="30" r="2"/>
							<circle cx="15" cy="15" r="1"/>
							<circle cx="45" cy="15" r="1"/>
							<circle cx="15" cy="45" r="1"/>
							<circle cx="45" cy="45" r="1"/>
							<path d="M30 15l5 5-5 5-5-5z"/>
							<path d="M15 30l5 5-5 5-5-5z"/>
							<path d="M45 30l5 5-5 5-5-5z"/>
						</g>
					</g>
				</svg>
			</div>
			
			<!-- Header content -->
			<div class="relative max-w-4xl mx-auto px-4 py-12 text-center">
				<div class="inline-flex items-center justify-center w-16 h-16 bg-white/20 rounded-full mb-4 backdrop-blur-sm">
					<svg class="w-8 h-8 text-amber-100" fill="currentColor" viewBox="0 0 24 24">
						<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
					</svg>
				</div>
				<h1 class="text-5xl font-bold mb-3 text-shadow-lg">My Mastodon Archive</h1>
				<p class="text-amber-100 text-xl font-medium tracking-wide">A curated collection of my social thoughts</p>
				<div class="mt-6 w-24 h-1 bg-amber-300 mx-auto rounded-full opacity-80"></div>
			</div>
		</header>

		<main class="max-w-4xl mx-auto px-4 py-12">
			{posts.length === 0 && (
				<div class="bg-white rounded-xl shadow-lg p-10 text-center border border-orange-200">
					<div class="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
						<svg class="w-8 h-8 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
						</svg>
					</div>
					<h2 class="text-3xl font-bold text-stone-700 mb-6">No posts found</h2>
					<p class="text-stone-600 mb-6 text-lg">Place your Mastodon archive JSON file at <code class="bg-orange-100 px-3 py-1 rounded-md text-sm font-mono text-orange-800">public/mastodon-archive.json</code> to see your posts here.</p>
					<div class="text-left max-w-lg mx-auto bg-amber-50 p-6 rounded-lg border border-amber-200">
						<p class="font-bold mb-4 text-amber-800 text-lg">Setup Instructions:</p>
						<ol class="list-decimal list-inside space-y-3 text-stone-700">
							<li>Export your Mastodon archive from your instance</li>
							<li>Extract the archive and locate the JSON file (usually named like 'outbox.json')</li>
							<li>Place it in the public folder as 'mastodon-archive.json'</li>
							<li>Restart the development server</li>
						</ol>
					</div>
				</div>
			)}

			<div class="space-y-8">
				{posts.map((post) => (
					<MastodonPost post={post} />
				))}
			</div>
		</main>
	</body>
</html>

